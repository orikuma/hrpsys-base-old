/**
 * @file AutoBalancerService.idl
 * @brief Services for the autobalancer interface
 */
//#include "OpenHRPCommon.idl"
module OpenHRP
{
  
  interface AutoBalancerService
  {
    typedef sequence<double, 3> DblSequence3;
    //typedef sequence<double, 4> DblSequence4;
    typedef double DblArray3[3];
    typedef double DblArray4[4];
    struct Footstep
    {
      DblArray3 pos; // foot position
      DblArray4 rot; // foot orientation by quaternion
      string leg; // leg name
    };
    typedef sequence<Footstep> FootstepSequence;

    enum SupportLegState {
      RLEG,
      LLEG,
      BOTH
    };

    struct FootstepParam
    {
      Footstep rleg_coords;
      Footstep lleg_coords;
      Footstep support_leg_coords;
      Footstep swing_leg_coords;
      Footstep swing_leg_src_coords;
      Footstep swing_leg_dst_coords;
      Footstep dst_foot_midcoords;
      SupportLegState support_leg;
      SupportLegState support_leg_with_both;
    };

    typedef sequence<string> StrSequence;

    struct GaitGeneratorParam // parameters for GaitGenerator
    {
      double default_step_time; // step time [s]
      double default_step_height; // step height [m]
      double default_double_support_ratio; // ratio of double support period. ratio is included in (0, 1)
      sequence<double, 3> stride_parameter; // stride limitation of x[m], y[m], and theta[deg]
    };

    struct AutoBalancerParam // parameters for AutoBalancer
    {
      sequence<DblSequence3, 2> default_zmp_offsets; // zmp offset vectors[m] for :rleg and :lleg (<-please set by this order)
      double move_base_gain;
    };

    /**
     * @brief Walk to the goal position and orientation. Returns without waiting for whole steps to be executed.
     * @param i_x[m], i_y[m], and i_th[deg] are goal x-y-position and z-orientation from the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goPos(in double x, in double y, in double th);

    /**
     * @brief Walk at the desired velocity. If the robot is stopping, the robot starts stepping. Returns without waiting for whole steps to be executed.
     * @param i_vx[m/s], i_vy[m/s], and i_vth[deg/s] are velocity in the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goVelocity(in double vx, in double vy, in double vth);

    /**
     * @brief Stop stepping.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean goStop();

    /**
     * @brief Set footsteps. Returns without waiting for whole steps to be executed.
     * @param fs is sequence of FootStep structure.
     * @return true if set successfully, false otherwise
     */
    boolean setFootSteps(in FootstepSequence fs);

    /**
     * @brief Wait for whole footsteps are executed.
     * @param
     * @return true if set successfully, false otherwise
     */
    void waitFootSteps();

    /**
     * @brief Start AutoBalancer mode in which the robot controls the COM.
     * @param limbs is sequence of limbs to fix. limbs are :rleg, :lleg, :rarm, and :larm
     * @return true if set successfully, false otherwise
     */
    boolean startAutoBalancer(in StrSequence limbs);

    /**
     * @brief Stop AutoBalancer mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean stopAutoBalancer();

    /**
     * @brief Set GaitGenerator parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setGaitGeneratorParam(in GaitGeneratorParam i_param);

    /**
     * @brief Get GaitGenerator parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getGaitGeneratorParam(out GaitGeneratorParam i_param);

    /**
     * @brief Set AutoBalancer parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setAutoBalancerParam(in AutoBalancerParam i_param);

    /**
     * @brief Get AutoBalancer parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getAutoBalancerParam(out AutoBalancerParam i_param);

    /**
     * @brief Get footstep parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getFootstepParam(out FootstepParam i_param);
  };
};
